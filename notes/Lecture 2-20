module type SET = sig
type 'a set
val empty : 'a set
val mem : 'a -> 'a set -> bool
val add : 'a -> 'a set -> 'a set
val rem : 'a -> 'a set -> 'a set
val size : 'a set -> int
val union: 'a set -> 'a set -> 'a set
val inter: 'a set -> 'a set -> 'a set

end


module Set : SET = struct
type 'a set = 'a list

let empty = []
let mem x s = List.mem x s
let add x s = if mem x s then s else x :: s
let rec size = 
	match s with 
	| [] -> 0
	| x :: t -> size (rem x t) + 1
let rem x = List.filter ((<>) x)
let union s1 s2 = s1 @ s2
let inter s1 s2 = 
	List.fold_left 
		(fun s x -> if mem x s2 then x::s else s)
		s1
end



module type STACK = sig
	type 'a stack
	exception EmptyStack
	val empty : 'a stack
	val is_empty : 'a stack
	val push :'a -> 'a stack -> 'a stack
	val pop : 'a stack -> 'a * 'a stack
	val mop : ('a -> 'b) -> 'a stack -> 'b stack

end

module stack : STACK = struct
	type 'a stack = 'a list
	exception EmptyStack
	let empty = []
	let is_empty s = s = []
	let push x s = x :: s
	let pop s = 
		match s with 
		| [] -> raise EmptyStack
		| x :: s' -> (x,s')
	let map f s = List.map f s	
end

let ArrayStack : SET = struct
	type 'a stack = ('a array * int) option
	exception EmptyStack
	let empty = None
	let is_empty s = 
		match s with
		| None -> true
		| Some (a,i) -> i = 0
	let push x s = 
		match s with
		| None -> 
			let a = Array.make 10 x in
			Some(a,1)

		| Some(a,i) -> 
			if i < Array.length a then
			begin 
				a.(i) <- x;
				some (a,i+1)
			end
		else
			begin
				let a' = Array.make 10 x in
				let a'' = 
			end

end